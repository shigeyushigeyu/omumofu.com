---
// src/pages/thread/[id].astro
export const prerender = false; // このページはSSR

import Layout from '../../layouts/Layout.astro';

const { id } = Astro.params;

// 型定義
type Post = {
  author_name: string;
  body: string;
  created_at: string;
};
type ThreadData = {
  id: number;
  title: string;
  posts: Post[];
};

let threadData: ThreadData | null = null;
let error: string | null = null;

try {
  const response = await fetch(`${Astro.url.origin}/api/threads/${id}`);
  if (response.ok) {
    threadData = await response.json();
  } else {
    error = `スレッドの取得に失敗しました (ステータス: ${response.status})`;
  }
} catch (e) {
  console.error(e);
  error = "APIへの接続中にエラーが発生しました。";
}
---
<Layout title={threadData ? threadData.title : (error ? "エラー" : "読み込み中...")}>
  <main>
    {error && (
      <div>
        <h1>エラー</h1>
        <p>{error}</p>
      </div>
    )}
    {threadData && (
      <>
        <h1>{threadData.title}</h1>
        <div class="posts-container">
          {threadData.posts.map((post, index) => (
            <div class="post">
              <p><strong>{index + 1}. {post.author_name}</strong> - {new Date(post.created_at).toLocaleString()}</p>
              <p>{post.body}</p>
            </div>
          ))}
          {threadData.posts.length === 0 && <p>このスレッドにはまだ投稿がありません。</p>}
        </div>
        <hr />
        <h2>書き込む</h2>
        <form method="POST" action="/api/posts" enctype="application/x-www-form-urlencoded">
          <input type="hidden" name="thread_id" value={threadData.id} />
          {/* ...フォームの残りの部分... */}
        </form>
      </>
    )}
    {!threadData && !error && <p>読み込み中...</p>}
  </main>
</Layout>
<style>
  .post { border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; }
  form div { margin-bottom: 10px; }
</style>