---
// src/pages/messageboard.astro
import Layout from '../layouts/Layout.astro';
// getDbClient のような関数を使っている場合
import { getDbClient } from '../lib/db'; 

// "let" で宣言し、try...finallyブロックで処理を完結させるのが安全
// --- ここからが重要 ---

// letで変数を宣言。try...catchの外で使えるようにするため。
let threads = [];
let error = null;

try {
  // DB接続からデータ取得、接続終了までをすべてこのブロック内で行う
  // このtryブロックの中でDB処理をすべて完結させる
  const client = getDbClient();
  await client.connect();
  const result = await client.query('SELECT id, title, created_at FROM threads ORDER BY created_at DESC');
  threads = result.rows;
  await client.end();

} catch (e) {
  // もしエラーが起きたら、内容をコンソールに出力し、エラーメッセージをセットする
  // これで500エラーではなく、エラーメッセージが表示されるようになる
  console.error("messageboard.astro database error:", e);
  error = "スレッド一覧の取得中にエラーが発生しました。しばらくしてから再読み込みしてください。";
}
// この時点で DB 接続に関するオブジェクト (client) はスコープ外になっているのが理想

// --- ここまで ---
---


<Layout title="掲示板">
  <main>
    <h1>掲示板スレッド一覧</h1>
    
    {error ? (
      <p style="color: red;">{error}</p>
    ) : (
      <>
        {threads.length > 0 ? (
          <ul>
            {threads.map(thread => (
              <li>
                <a href={`/thread/${thread.id}`}>{thread.title}</a>
                <small>({new Date(thread.created_at).toLocaleString()})</small>
              </li>
            ))}
          </ul>
        ) : (
          <p>まだスレッドがありません。</p>
        )}
      </>
    )}
  </main>
</Layout>
<style> pre { background-color: #eee; padding: 1em; white-space: pre-wrap; word-wrap: break-word; } </style>